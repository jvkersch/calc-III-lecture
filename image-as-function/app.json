[{"name": "app.py", "content": "from shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom skimage import data\nfrom skimage.color import rgb2gray\nfrom skimage.filters import gaussian\n\nui.page_opts(fillable=True)\n\n\ndef cat_factory():\n    return rgb2gray(data.cat())\n\ndef square_factory():\n    square = np.zeros((400, 400), dtype=float)\n    square[100:300, 100:300] = 1.0\n    return square\n\ndef coins_factory():\n    return data.coins()\n\ndef black_white_horizontal_factory():\n    arena = np.zeros((400, 400), dtype=float)\n    arena[200:, :] = 1.0\n    return gaussian(arena, sigma=10.0)\n\ndef black_white_vertical_factory():\n    arena = np.zeros((400, 400), dtype=float)\n    arena[:, 200:] = 1.0\n    return gaussian(arena, sigma=10.0)\n\nIMAGE_FACTORIES = {\n    \"Square\": square_factory,\n    \"Black/white (horizontal)\": black_white_horizontal_factory,\n    \"Black/white (vertical)\": black_white_vertical_factory,\n    \"Cat\": cat_factory,\n    \"Coins\": coins_factory,\n}\n\nui.page_opts(title=\"Images as functions\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_selectize(\n        \"image\", \"Image\",\n        list(IMAGE_FACTORIES),\n    )\n\n@reactive.calc\ndef img():\n    factory = IMAGE_FACTORIES[input.image()]\n    return factory()\n\nwith ui.layout_columns(col_widths=(6, 6)):\n    with ui.card():\n        @render.plot\n        def image_2d_next_panel():\n            plt.imshow(img(), cmap=\"gray\")\n            plt.title(\"Original image\")\n\n    with ui.card():\n        @render_plotly\n        def image_3d():\n            fig = go.Figure(data=[go.Surface(z=img())])\n            fig.update_layout(\n                autosize=False,\n                width=500, height=500,\n                margin=dict(l=65, r=50, b=65, t=90))\n            return fig\n", "type": "text"}]