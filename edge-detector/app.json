[{"name": "app.py", "content": "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.signal import convolve2d\nfrom skimage import data\nfrom skimage.color import rgb2gray\nfrom skimage.filters import gaussian\n\nui.page_opts(fillable=True)\n\nGRAD_Y = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])\n\nGRAD_X = GRAD_Y.T\n\n\ndef cat_factory():\n    return rgb2gray(data.cat())\n\n\ndef square_factory():\n    square = np.zeros((400, 400), dtype=float)\n    square[100:300, 100:300] = 1.0\n    return square\n\n\ndef coins_factory():\n    return data.coins()\n\n\ndef black_white_horizontal_factory():\n    arena = np.zeros((400, 400), dtype=float)\n    arena[200:, :] = 1.0\n    return gaussian(arena, sigma=10.0)\n\n\ndef black_white_vertical_factory():\n    arena = np.zeros((400, 400), dtype=float)\n    arena[:, 200:] = 1.0\n    return gaussian(arena, sigma=10.0)\n\n\nIMAGE_FACTORIES = {\n    \"Square\": square_factory,\n    \"Black/white (horizontal)\": black_white_horizontal_factory,\n    \"Black/white (vertical)\": black_white_vertical_factory,\n    \"Cat\": cat_factory,\n    \"Coins\": coins_factory,\n}\n\nui.page_opts(title=\"Edge Detection via Derivatives\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_selectize(\n        \"image\",\n        \"Image\",\n        list(IMAGE_FACTORIES),\n    )\n    ui.input_slider(\"threshold\", \"Threshold\", 0.0, 4.0, 2.0)\n\n\n@reactive.calc\ndef img():\n    factory = IMAGE_FACTORIES[input.image()]\n    return factory()\n\n\n@reactive.calc\ndef grad_x():\n    return convolve2d(GRAD_X, img(), mode=\"valid\")\n\n\n@reactive.calc\ndef grad_y():\n    return convolve2d(GRAD_Y, img(), mode=\"valid\")\n\n\n@reactive.effect\ndef adjust_threshold_slider_bounds():\n    grad_norm = np.sqrt(grad_x() ** 2 + grad_y() ** 2)\n    min_grad = grad_norm.min()\n    max_grad = grad_norm.max()\n\n    ui.update_slider(\n        \"threshold\",\n        min=round(min_grad, 2),\n        max=round(max_grad, 2),\n        value=(min_grad + max_grad) / 2,\n    )\n\n\nwith ui.layout_columns(col_widths=(6, 6)):\n    with ui.card():\n\n        @render.plot\n        def image_2d():\n            plt.imshow(img(), cmap=\"gray\")\n            plt.colorbar()\n            plt.title(\"Original image\")\n\n    with ui.card():\n\n        @render.plot\n        def image_2d_edges():\n            grad_norm = np.sqrt(grad_x() ** 2 + grad_y() ** 2)\n            y_true, x_true = np.nonzero(grad_norm > input.threshold())\n\n            plt.imshow(img(), cmap=\"gray\")\n            plt.colorbar()\n            plt.plot(x_true, y_true, \"r.\", markersize=1)\n            plt.title(\"Edges (red)\")\n\n    with ui.card():\n\n        @render.plot\n        def grad_x_plot():\n            plt.imshow(grad_x())\n            plt.colorbar()\n            plt.title(\"Derivative (x)\")\n\n    with ui.card():\n\n        @render.plot\n        def grad_y_plot():\n            plt.imshow(grad_y())\n            plt.colorbar()\n            plt.title(\"Derivative (y)\")\n", "type": "text"}]